package com.smkituilibrary

import android.util.Log
import com.facebook.react.bridge.Promise
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.bridge.ReactContextBaseJavaModule
import com.facebook.react.bridge.ReactMethod
import com.sency.smbase.core.listener.ConfigurationResult
import com.sency.smkitui.SMKitUI
import com.sency.smkitui.listener.SMKitUIWorkoutListener
import com.sency.smkitui.model.ExerciseData
import com.sency.smkitui.model.WorkoutSummaryData
import com.smkituilibrary.mapper.toSMWorkout
import com.smkituilibrary.mapper.toWorkoutConfig
import com.smkituilibrary.model.SMKitWorkout
import com.smkituilibrary.model.SMKitWorkoutConfig
import com.squareup.moshi.Moshi
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory

class SmkitUiLibraryModule(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext), SMKitUIWorkoutListener {

  @Suppress("PrivatePropertyName")
  private val TAG = "SmkitUiLibraryModule"
  private var smKitUI: SMKitUI? = null
  private var resultPromise: Promise? = null
  private val moshi: Moshi by lazy { moshi() }

  override fun getName(): String = "SMKitUIManager"

  override fun handleWorkoutErrors(error: Error) {
    resultPromise?.reject("Workout Exercise Error", error)
  }

  override fun workoutDidFinish(summary: WorkoutSummaryData) {
    sendResult(summary, didFinish = true)
  }

  override fun didExitWorkout(summary: WorkoutSummaryData) {
    sendResult(summary, didFinish = false)
  }

  override fun exerciseDidFinish(data: ExerciseData) {
    println(data)
  }

  @ReactMethod
  fun configure(key: String, promise: Promise) {
    smKitUI = SMKitUI.Configuration(reactApplicationContext)
      .setUIKey(key)
      .configure(object : ConfigurationResult {
        override fun onSuccess() {
          promise.resolve("")
        }

        override fun onFailure() {
          promise.reject("Configure Failed", "null")
        }
      })
  }

  @ReactMethod
  fun startAssessment(type: String, showSummary: Boolean, promise: Promise) {
    this.resultPromise = promise
    try {
      smKitUI?.startAssessment(listener = this)
    } catch (e: Exception) {
      promise.reject("Configure Failed", e)
    }
  }

  @ReactMethod
  fun startCustomWorkout(jsonArguments: String, promise: Promise) {
    try {
      Log.d(TAG, "startCustomWorkout: $jsonArguments")
      val adapter = moshi.adapter(SMKitWorkout::class.java)
      val smKitWorkout = adapter.fromJson(jsonArguments) ?: return

      smKitUI?.startWorkout(workout = smKitWorkout.toSMWorkout(), listener = this)
    } catch (e: Exception) {
      promise.reject("Configure Failed", e)
    }
  }

  @ReactMethod
  fun startWorkoutProgram(jsonArguments: String, promise: Promise) {
    try {
      Log.d(TAG, "startWorkoutProgram: $jsonArguments")
      val adapter = moshi.adapter(SMKitWorkoutConfig::class.java)
      val smKitWorkoutConfig = adapter.fromJson(jsonArguments) ?: return

      smKitUI?.startWorkoutProgram(
        workoutConfig = smKitWorkoutConfig.toWorkoutConfig(),
        listener = this,
      )
    } catch (e: Exception) {
      promise.reject("Configure Failed", e)
    }
  }

  private fun sendResult(summary: WorkoutSummaryData, didFinish: Boolean) {
    val promise = resultPromise ?: run {
      resultPromise?.reject("Unable to create summary", "Missing callback", null)
      return
    }
    try {
      val adapter = moshi.adapter(WorkoutSummaryData::class.java)
      val result: Map<String, Any> = mapOf(
        "summary" to adapter.toJson(summary),
        "didFinish" to didFinish,
      )
      promise.resolve(result)
    } catch (e: Exception) {
      promise.reject("Unable to create summary", e)
    }
  }

  private fun moshi(): Moshi {
    return Moshi.Builder()
      .add(KotlinJsonAdapterFactory())
      .build()
  }

}
