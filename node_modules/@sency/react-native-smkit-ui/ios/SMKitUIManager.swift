import Foundation
import SMKitUI
import SMBase

@objc(SMKitUIManager)
class SMKitUIManager: RCTViewManager {
    
    let smkitUIViewController = SMKitUIViewController()
    var onWorkoutDidFinish:RCTPromiseResolveBlock?
    var onWorkoutFailed:RCTPromiseRejectBlock?
    
    override func view() -> UIView! {
        return smkitUIViewController.view as? SMKitUIView
    }
    
    @objc(configure:onSuccess:onFailure:)
    func configure(key:NSString, onSuccess: @escaping RCTPromiseResolveBlock,onFailure:@escaping RCTPromiseRejectBlock) -> Void {
        SMKitUIModel.configure(authKey: "\(key)") {
            onSuccess("")
        } onFailure: { err in
            onFailure("Configure Failed", err?.localizedDescription ?? "", err)
        }
    }
    
    @objc(startAssessment:showSummary:onWorkoutDidFinish:onWorkoutFailed:)
    func startAssessment(type:NSString, showSummary:Bool, onWorkoutDidFinish: @escaping RCTPromiseResolveBlock, onWorkoutFailed:@escaping RCTPromiseRejectBlock){
        
        self.onWorkoutDidFinish = onWorkoutDidFinish
        self.onWorkoutFailed = onWorkoutFailed
        DispatchQueue.main.async {
            do{
                if let type = AssessmentTypes(rawValue: "\(type)"){
                    try SMKitUIModel.startAssessmet(viewController: self.smkitUIViewController, type: type, showSummary: showSummary, delegate: self){error in
                        onWorkoutFailed("StartAssessment Failed", error.localizedDescription, error)
                    }
                }else{
                    onWorkoutFailed("StartAssessment Failed", "Invalid type", nil)
                }
            }catch{
                onWorkoutFailed("StartAssessment Failed", error.localizedDescription, error)
            }
        }
    }
    
    @objc(startCustomWorkout:onWorkoutDidFinish:onWorkoutFailed:)
    func startCustomWorkout(json:[String:Any], onWorkoutDidFinish: @escaping RCTPromiseResolveBlock, onWorkoutFailed:@escaping RCTPromiseRejectBlock){
        self.onWorkoutDidFinish = onWorkoutDidFinish
        self.onWorkoutFailed = onWorkoutFailed
        DispatchQueue.main.async {
            do{
                let workout = try SMWorkout(FromJson: json)
                try SMKitUIModel.startWorkout(viewController: self.smkitUIViewController, workout: workout, delegate: self)
            }catch{
                onWorkoutFailed("StartCustomWorkout Failed", error.localizedDescription, error)
            }
        }
    }
    
    @objc(startWorkoutProgram:onWorkoutDidFinish:onWorkoutFailed:)
    func startWorkoutProgram(json:[String:Any], onWorkoutDidFinish: @escaping RCTPromiseResolveBlock, onWorkoutFailed:@escaping RCTPromiseRejectBlock){
        self.onWorkoutDidFinish = onWorkoutDidFinish
        self.onWorkoutFailed = onWorkoutFailed
        
        guard let week = json["week"] as? Int,
            let zone = json["bodyZone"] as? String,
              let difficultyLevelRaw = json["difficultyLevel"] as? String,
              let workoutDurationRaw = json["workoutDuration"] as? String,
              let programID = json["programID"] as? String,
              let bodyZone = BodyZone(rawValue: zone),
              let difficultyLevel = WorkoutDifficulty(rawValue: difficultyLevelRaw),
              let workoutDuration = WorkoutDuration(rawValue: workoutDurationRaw)
        else {
            onWorkoutFailed("StartWorkoutProgram Failed", "Invalid Workout Config", nil)
            return
        }
        
        let config = WorkoutConfig(
            week: week,
            bodyZone: bodyZone,
            difficultyLevel: difficultyLevel,
            workoutDuration: workoutDuration,
            programID: programID
        )
        
        SMKitUIModel.startWorkoutFromProgram(viewController: self.smkitUIViewController, workoutConfig: config, delegate: self) { error in
            onWorkoutFailed("StartWorkoutProgram Failed", error.localizedDescription, error)
        }
    }
    
    override class func requiresMainQueueSetup() -> Bool {
        true
    }
}

extension SMKitUIManager:SMKitUIWorkoutDelegate{
    func handleWorkoutErrors(error: any Error) {
        onWorkoutFailed?("Workout Exercise Error", error.localizedDescription, error)
    }
    
    func workoutDidFinish(data: WorkoutSummaryData) {
        sendResult(data: data, didFinish: true)
        SMKitUIModel.exitSDK()
    }
    
    func didExitWorkout(data: WorkoutSummaryData) {
        sendResult(data: data, didFinish: false)
        SMKitUIModel.exitSDK()
    }
    
    func sendResult(data: WorkoutSummaryData, didFinish:Bool){
        guard let onWorkoutDidFinish = self.onWorkoutDidFinish else {
            onWorkoutFailed?("Unable to create summary", "Missing callback" , nil)
            return
        }
        do{
            let result:[String:Any] = [
                "summary": try data.toStringJson(),
                "didFinish": didFinish
            ]
            onWorkoutDidFinish(result)
        }catch{
            onWorkoutFailed?("Unable to create summary", error.localizedDescription, error as NSError)
        }
    }
    
    func exerciseDidFinish(data: ExerciseData) {
        
    }
}

extension WorkoutSummaryData{
    func json() throws -> String{
        let jsonEncoder = JSONEncoder()
        let jsonData = try jsonEncoder.encode(self)
        return String(data: jsonData, encoding: String.Encoding.utf8) ?? ""
    }
}
